package bx

import "unsafe"

func StrideAlign(offset uint32, uint32 uint32) uint32 {
	return 0
}

func StrideAlign16(offset uint16, uint32 uint16) uint16 {
	return 0
}

func UInt32_stasub(size uint32, size1 uint32) uint32 {
	return 0
}

func Align16(size uint32) uint32 {
	return 0
}

func MemZero(pointer unsafe.Pointer, size int) {
	dst := ([]byte)(pointer)
	if size <= 100 {
		copy(dst, s_zero_array[:size])
		return
	}

	N := size / 100
	M := size % 100

	for i := 0; i < N; i ++ {
		copy(dst[i * 100:], s_zero_array[:])
	}

	copy(dst[N*100:], s_zero_array[:M])
}

func MemFill(pointer unsafe.Pointer, size int) {
	dst := ([]byte)(pointer)
	if size <= 100 {
		copy(dst, s_ff_array[:size])
		return
	}

	N := size / 100
	M := size % 100

	for i := 0; i < N; i ++ {
		copy(dst[i * 100:], s_ff_array[:])
	}

	copy(dst[N*100:], s_ff_array[:M])
}

/////////////////// static & global field

var s_zero_array = [100]byte{}
var s_ff_array 	 = [100]byte{
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
}
